from pizza import Margherita, Pepperoni, Hawaiian
from order import bake, deliver, pickup
from cli import menu, order

# –¥–ª—è –∑–∞–º–µ–Ω—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ randint()
from unittest.mock import patch
# –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è click
from click.testing import CliRunner
import random


def test_dict():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥ dict"""
    assert Hawaiian(size='L').dict() == {
        'tomato sauce': 200,
        'mozzarella': 150,
        'chicken': 75,
        'pineapples': 50,
    }
    assert Pepperoni(size='XL').dict() == {
        'tomato sauce': 400,
        'mozzarella': 300,
        'pepperoni': 140,
    }
    assert 'tomatoes' in Margherita().dict()


def test_eq():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥ eq"""
    assert Margherita(size='XL') == Margherita(size='XL')
    assert Margherita(size='L') != Margherita(size='XL')
    assert Margherita(size='XL') != Hawaiian(size='XL')
    assert Margherita(size='XL') != Pepperoni(size='L')


def test_bake():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é bake –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞"""
    assert bake.__wrapped__(Margherita(size='XL')) in range(10, 16)
    assert bake.__wrapped__(Margherita(size='L')) in range(5, 11)


def test_deliver():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é deliver –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞"""
    assert deliver.__wrapped__(Margherita(size='XL')) in range(20, 31)


def test_pickup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é pickup –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞"""
    assert pickup.__wrapped__(Pepperoni()) in range(1, 6)


def test_bake_with_decorator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é bake —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º"""
    my_randint = 11
    with patch.object(random, 'randint', return_value=my_randint):
        assert (
                bake(Margherita()) == 'üë®‚Äçüç≥ –ú—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –≤–∞—à—É –ª—é–±–∏–º—É—é' +
                ' –ø–∏—Ü—Ü—É Margherita üßÄ –∑–∞ 11 –º–∏–Ω ‚è≥'
        )


def test_deliver_with_decorator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é deliver —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º"""
    my_randint = 21
    with patch.object(random, 'randint', return_value=my_randint):
        assert (
                deliver(Pepperoni()) == 'üõµ –ú—ã –¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤–∞—à—É –ª—é–±–∏–º—É—é' +
                ' –ø–∏—Ü—Ü—É Pepperoni üçï –∑–∞ 21 –º–∏–Ω ‚è≥'
        )


def test_pickup_with_decorator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é pickup —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º"""
    my_randint = 18
    with patch.object(random, 'randint', return_value=my_randint):
        assert (
                pickup(Hawaiian()) == 'üöò –í—ã –∑–∞–±—Ä–∞–ª–∏ –≤–∞—à—É –ª—é–±–∏–º—É—é' +
                ' –ø–∏—Ü—Ü—É Hawaiian üçç –∑–∞ 18 –º–∏–Ω ‚åõ'
        )


def test_order_with_delivery():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑ –≤ –ø–∏—Ü—Ü–µ—Ä–∏–∏"""
    my_randint_deliver = 17
    with patch.object(random, 'randint', return_value=my_randint_deliver):
        runner = CliRunner()
        result = runner.invoke(order, ['Margherita', '--delivery', '--size=L'])
        assert (
                'üë®‚Äçüç≥ –ú—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –≤–∞—à—É –ª—é–±–∏–º—É—é –ø–∏—Ü—Ü—É' +
                ' Margherita üßÄ –∑–∞ 17 –º–∏–Ω ‚è≥\n' +
                'üõµ –ú—ã –¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤–∞—à—É –ª—é–±–∏–º—É—é –ø–∏—Ü—Ü—É' +
                ' Margherita üßÄ –∑–∞ 17 –º–∏–Ω ‚è≥\n'
                in result.output
        )


def test_order_without_delivery():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑ –≤ –ø–∏—Ü—Ü–µ—Ä–∏–∏"""
    my_randint_pickup = 9
    with patch.object(random, 'randint', return_value=my_randint_pickup):
        runner = CliRunner()
        result = runner.invoke(order, ['Pepperoni', '--size=L'])
        assert (
                'üë®‚Äçüç≥ –ú—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –≤–∞—à—É –ª—é–±–∏–º—É—é –ø–∏—Ü—Ü—É' +
                ' Pepperoni üçï –∑–∞ 9 –º–∏–Ω ‚è≥\n' +
                'üöò –í—ã –∑–∞–±—Ä–∞–ª–∏ –≤–∞—à—É –ª—é–±–∏–º—É—é –ø–∏—Ü—Ü—É' +
                ' Pepperoni üçï –∑–∞ 9 –º–∏–Ω ‚åõ\n'
                in result.output
        )


def test_menu():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –º–µ–Ω—é –ø–∏—Ü—Ü–µ—Ä–∏–∏"""
    runner = CliRunner()
    result = runner.invoke(menu)
    assert (
            result.output ==
            '- Margherita üßÄ: tomato sauce, mozzarella, tomatoes\n' +
            '- Pepperoni üçï: tomato sauce, mozzarella, pepperoni\n' +
            '- Hawaiian üçç: tomato sauce, mozzarella, chicken, pineapples\n'
    )
